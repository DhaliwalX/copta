
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 103
#define YY_END_OF_BUFFER 104
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[738] =
    {   0,
        0,    0,    0,    0,    0,    0,  104,  102,    6,  101,
      102,  102,   48,   39,  102,    9,   10,   46,   44,   35,
       45,   17,   47,   98,   98,   15,   16,   53,   23,   54,
       19,   99,   11,   12,   40,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   13,
       38,   14,   59,    1,    1,    2,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,   46,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,   50,    0,  100,   34,   37,
       26,    0,  100,   32,   20,   30,   21,   31,    0,   98,
        8,    7,   33,   98,   98,    0,    0,    0,   41,   55,
       49,   22,   56,   42,   99,   25,   99,   99,   99,   99,
       99,   99,   99,   69,   99,   99,   99,   99,   99,   99,
       99,   74,   99,   58,   99,   99,   99,   99,   99,   99,

       99,   99,   99,   99,   99,   99,   99,   99,   24,   36,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    4,    5,    4,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,   52,   18,   98,    0,   98,   98,   98,
       27,   51,   28,   43,   99,   99,   99,   99,   99,   99,
       99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       72,   99,   99,   99,   95,   75,   99,   99,   99,   99,
       99,   99,   99,   99,   80,   99,   81,   99,   99,   99,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,   29,   99,   99,   99,   64,   99,
       99,   99,   99,   99,   99,   99,   70,   91,   99,   99,

       99,   99,   99,   99,   99,   84,   99,   99,   99,   99,
       78,   99,   85,   99,   62,   99,   83,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,   87,   88,   63,   65,   89,   90,   99,
       99,   99,   99,   99,   99,   86,   99,   99,   99,   99,

       99,   99,   97,   99,   79,   99,   82,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,   99,   99,   99,   60,   92,
       99,   99,   99,   94,   99,   76,   96,   77,   61,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,   99,   99,   68,

       93,   71,   99,   99,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,   66,   67,
       73,   99,    1,    1,    1,    1,    3,    3,    3,    3,
       99,    1,    3,   57,    1,    3,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   27,   27,   27,   28,   27,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       30,    1,   31,   32,   29,    1,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   29,   42,   43,   44,   45,
       46,   47,   29,   48,   49,   50,   51,   52,   53,   54,
       55,   29,   56,   57,   58,   59,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[60] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    1,    1,    1,    4,    4,    4,
        1,    1,    1,    1,    1,    1,    4,    4,    5,    1,
        1,    1,    4,    4,    4,    4,    4,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[749] =
    {   0,
        0,    0,   59,    0,  118,    0, 1052, 1053, 1053, 1053,
     1027, 1044, 1025,  170, 1039, 1053, 1053, 1023,  166, 1053,
      165,  165,  174,  177,  184, 1053, 1053,  164,  182,  184,
     1053,    0, 1053, 1053, 1022,  164,  997,  177,  155,  173,
      189,  181, 1007,  178, 1006,  183,  184,  195,  197, 1053,
      218, 1053, 1053,    0,    0, 1053, 1018, 1035, 1016,  235,
     1030,    0,    0, 1014,  231,    0,  230,  230,  239,  242,
      249,    0,    0,  229,  247,  249,    0,  279,    0,    0,
     1013,  229,  988,  247,  220,  238,  254,  265,  998,  251,
      997,  285,  297,  258,  244,    0,  287,    0,    0,    0,

        0,    0, 1009,  336, 1008,  332,  338,    0,    0,  277,
      330,    0,  331,  341,  341,  348,  353,    0,    0,  339,
      350,  353,    0,  385,    0,    0, 1007,  330,  982,  351,
      343,  353,  360,  371,  992,  349,  991,  391,  403,  362,
      347,    0,  393,    0,    0, 1003, 1020, 1019, 1053, 1053,
     1053, 1015, 1014, 1053, 1053, 1053, 1053, 1053, 1006,  427,
     1053, 1053, 1053,  434,  441,  455,  373,    0,  997, 1053,
      996, 1053, 1053,  424,    0, 1053,  964,  985,  980,  416,
      983,  970,  429,    0,  965,  962,  429,  969,  966,  962,
      964,    0,  961,  958,  956,  952,  961,  953,  969,  954,

      959,  436,  430,  952,  950,  956,  955,  945, 1053, 1053,
        0,  970,  987,  986,    0,    0,    0,  982,  981,    0,
        0,    0,    0,    0,  973,  468,    0,    0,    0,  471,
      482,  494,  464,  502,  964,    0,  963,    0,    0,  468,
        0,    0,  931,  952,  947,  445,  950,  937,  489,    0,
      932,  929,  456,  936,  933,  929,  931,    0,  928,  925,
      923,  919,  928,  920,  936,  921,  926,  456,  460,  919,
      917,  923,  922,  912,    0,    0,    0,  937,  522,  538,
        0,    0,    0,  539,  540, 1053, 1053, 1053,    0,    0,
        0,    0,  944,  527,    0,    0,  538,  543,  554,  498,

      563,  935,    0,  934,    0,    0,  529,    0,    0,  902,
      923,  918,  527,  921,  908,  550,    0,  903,  900,  518,
      907,  904,  900,  902,    0,  899,  896,  894,  890,  899,
      891,  907,  892,  897,  483,  534,  890,  888,  894,  893,
      883,    0,    0, 1053, 1053,  584,  587,  590,  560,    0,
     1053, 1053, 1053,  908,  886,  889,  896,  891,  892,  877,
      537,  874,  891,  886,  885,  877,  874,  882,  869,  884,
        0,  881,  869,  864,    0,    0,  870,  861,  861,  873,
      859,  859,  861,  869,    0,  868,    0,  868,  860,  862,
        0,    0,  595,  598,  606,  576,  615,    0,    0,    0,

      877,  855,  858,  865,  860,  861,  846,  570,  843,  860,
      855,  854,  846,  843,  851,  838,  853,    0,  850,  838,
      833,    0,    0,  839,  830,  830,  842,  828,  828,  830,
      838,    0,  837,    0,  837,  829,  831,    0,    0,  609,
      620,  636,  612,  639,    0,    0,    0,  846,  824,  827,
      834,  829,  830,  815,  595,  812,  829,  824,  823,  815,
      812,  820,  807,  822,    0,  819,  807,  802,    0,    0,
      808,  799,  799,  811,  797,  797,  799,  807,    0,  806,
        0,  806,  798,  800, 1053,  804,  788,  795,    0,  796,
      786,  784,  792,  793,  780,  780,    0,    0,  781,  783,

      790,  783,  775,  776,  790,    0,  774,  780,  772,  784,
        0,  765,    0,  771,    0,  779,    0,    0,  780,  764,
      771,    0,  772,  762,  760,  768,  769,  756,  756,    0,
        0,  757,  759,  766,  759,  751,  752,  766,    0,  750,
      756,  748,  760,    0,  741,    0,  747,    0,  755,    0,
        0,  756,  740,  747,    0,  748,  738,  736,  744,  745,
      732,  732,    0,    0,  733,  735,  742,  735,  727,  728,
      742,    0,  726,  732,  724,  736,    0,  717,    0,  723,
        0,  731,    0,    0,    0,    0,    0,    0,    0,  722,
      727,  722,  727,  713,  726,    0,  718,  719,  709,  713,

      712,  721,    0,  715,    0,  716,    0,    0,    0,    0,
        0,    0,    0,  708,  713,  708,  713,  699,  712,    0,
      704,  705,  695,  699,  698,  707,    0,  701,    0,  702,
        0,    0,    0,    0,    0,    0,    0,  694,  699,  694,
      699,  685,  698,    0,  690,  691,  681,  685,  684,  693,
        0,  687,    0,  688,    0,  674,  670,  651,    0,    0,
      647,  636,  638,    0,  644,    0,    0,    0,    0,  620,
      633,  619,    0,    0,  619,  610,  618,    0,  628,    0,
        0,    0,    0,  611,  624,  610,    0,    0,  598,  586,
      590,    0,  587,    0,    0,    0,    0,  574,  544,    0,

        0,    0,  525,  523,  496,  478,    0,    0,    0,  473,
      443,  419,  362,    0,    0,    0,  354,  333,    0,    0,
        0,  305,    0,    0,    0,  303,    0,    0,    0,  243,
      226,  209,  161,    0,    0,    0, 1053,  677,  682,  684,
      689,  694,  699,  704,  709,  714,  719,  178
    } ;

static yyconst flex_int16_t yy_def[749] =
    {   0,
      737,    1,  737,    3,  737,    5,  737,  737,  737,  737,
      737,  738,  737,  737,  739,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  740,  737,  737,  737,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  737,
      737,  737,  737,  741,  741,  737,  741,  742,  741,  741,
      743,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,  741,  741,  741,  741,  744,

      744,  744,  744,  745,  744,  744,  746,  744,  744,  747,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  744,  744,  744,  744,  737,  738,  738,  737,  737,
      737,  739,  739,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  748,  737,  737,
      737,  737,  737,  737,  740,  737,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  737,  737,
      741,  741,  742,  742,  741,  741,  741,  743,  743,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,
       78,  741,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,  741,  741,  744,  744,  745,  745,
      744,  744,  744,  746,  746,  737,  737,  737,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  744,  744,

      744,  744,  744,  744,  744,  744,  744,  124,  744,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  744,  744,  737,  737,  737,  737,  737,  737,  748,
      737,  737,  737,  737,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      741,  741,  741,  741,  741,  741,  741,  741,  741,  741,

      741,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,  744,  744,  744,
      744,  744,  744,  744,  744,  744,  744,  744,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  737,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  741,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
      744,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  740,  740,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,

      740,  740,  740,  740,  740,  740,  740,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  740,  740,  740,  740,  740,
      740,  740,  740,  740,  740,  740,  740,  740,  740,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  740,  740,  740,

      740,  740,  740,  740,   78,   78,   78,   78,   78,   78,
       78,  124,  124,  124,  124,  124,  124,  124,  740,  740,
      740,  740,   78,   78,   78,   78,  124,  124,  124,  124,
      740,   78,  124,  740,   78,  124,    0,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737
    } ;

static yyconst flex_uint16_t yy_nxt[1113] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   25,
       26,   27,   28,   29,   30,   31,   32,   32,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   32,   32,
       42,   32,   43,   32,   44,   32,   32,   45,   46,   47,
       32,   48,   49,   32,   32,   50,   51,   52,   53,   54,
       55,   56,   55,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   71,   72,
       73,   74,   75,   76,   77,   78,   78,   78,   79,   80,
       81,   82,   83,   84,   85,   86,   87,   78,   78,   88,

       78,   89,   78,   90,   78,   78,   91,   92,   93,   78,
       94,   95,   78,   78,   96,   97,   98,   99,  100,  101,
      102,  101,  103,  104,  105,  106,  107,  108,  109,  110,
      111,  112,  113,  114,  115,  116,  117,  117,  118,  119,
      120,  121,  122,  123,  124,  124,  124,  125,  126,  127,
      128,  129,  130,  131,  132,  133,  124,  124,  134,  124,
      135,  124,  136,  124,  124,  137,  138,  139,  124,  140,
      141,  124,  124,  142,  143,  144,  145,  150,  155,  157,
      159,  350,  160,  160,  160,  161,  169,  170,  158,  156,
      162,  183,  164,  151,  165,  165,  165,  163,  736,  164,

      184,  165,  165,  165,  166,  171,  172,  173,  174,  180,
      167,  166,  177,  166,  196,  185,  178,  186,  192,  181,
      166,  188,  182,  202,  193,  194,  187,  205,  197,  189,
      168,  203,  199,  200,  190,  201,  207,  208,  204,  191,
      206,  209,  216,  221,  223,  225,  735,  226,  226,  226,
      227,  235,  236,  224,  222,  228,  249,  230,  217,  231,
      231,  231,  229,  734,  230,  250,  231,  231,  231,  232,
      237,  238,  239,  240,  210,  233,  232,  243,  232,  246,
      251,  244,  252,  273,  274,  232,  254,  262,  733,  247,
      271,  253,  248,  287,  255,  234,  241,  241,  241,  256,

      288,  263,  258,  272,  257,  241,  241,  241,  259,  260,
      275,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  265,  266,  268,  267,  277,  282,
      277,  280,  289,  276,  269,  291,  285,  147,  732,  152,
      731,  270,  161,  290,  292,  283,  293,  295,  294,  294,
      294,  302,  303,  297,  296,  298,  298,  298,  297,  730,
      298,  298,  298,  304,  305,  299,  306,  307,  310,  316,
      299,  300,  311,  313,  299,  329,  340,  341,  317,  299,
      349,  349,  321,  314,  338,  318,  315,  319,  729,  330,

      322,  301,  308,  308,  308,  323,  320,  339,  325,  728,
      324,  308,  308,  308,  326,  327,  342,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      308,  308,  308,  308,  308,  308,  308,  308,  308,  308,
      332,  333,  335,  334,  160,  160,  160,  353,  354,  343,
      336,  346,  346,  346,  166,  727,  164,  337,  165,  165,
      165,  166,  362,  166,  358,  359,  363,  347,  166,  347,
      166,  364,  348,  348,  348,  367,  382,  166,  368,  726,
      384,  396,  396,  383,  385,  226,  226,  226,  393,  393,
      393,  400,  401,  405,  406,  232,  429,  230,  232,  231,

      231,  231,  414,  430,  232,  415,  394,  232,  394,  232,
      431,  395,  395,  395,  432,  443,  443,  725,  232,  397,
      397,  397,  409,  476,  277,  724,  410,  280,  397,  397,
      477,  411,  723,  147,  397,  397,  397,  397,  397,  397,
      277,  277,  277,  280,  294,  294,  294,  285,  285,  147,
      152,  152,  447,  448,  299,  440,  440,  440,  297,  722,
      298,  298,  298,  299,  461,  299,  441,  462,  441,  721,
      299,  442,  442,  442,  299,  452,  453,  349,  349,  299,
      444,  444,  444,  456,  478,  492,  493,  457,  479,  444,
      444,  720,  458,  396,  396,  444,  444,  444,  444,  444,

      444,  346,  346,  346,  348,  348,  348,  348,  348,  348,
      719,  166,  393,  393,  393,  395,  395,  395,  525,  526,
      166,  718,  232,  395,  395,  395,  440,  440,  440,  443,
      443,  232,  397,  397,  397,  717,  299,  442,  442,  442,
      716,  397,  397,  558,  559,  299,  715,  397,  397,  397,
      397,  397,  397,  442,  442,  442,  444,  444,  444,  714,
      713,  712,  711,  710,  709,  444,  444,  708,  707,  706,
      705,  444,  444,  444,  444,  444,  444,  147,  704,  147,
      147,  147,  152,  703,  152,  152,  152,  175,  175,  211,
      702,  211,  211,  211,  213,  701,  213,  213,  213,  218,

      700,  218,  218,  218,  277,  277,  699,  277,  277,  279,
      279,  279,  279,  279,  284,  284,  284,  284,  284,  286,
      286,  286,  286,  286,  698,  697,  696,  695,  694,  693,
      692,  691,  690,  689,  688,  687,  686,  685,  684,  683,
      682,  681,  680,  679,  678,  677,  676,  675,  674,  673,
      672,  671,  670,  669,  668,  667,  666,  665,  664,  663,
      662,  661,  660,  659,  658,  657,  656,  655,  654,  653,
      652,  651,  650,  649,  648,  647,  646,  645,  644,  643,
      642,  641,  640,  639,  638,  637,  636,  635,  634,  633,
      632,  631,  630,  629,  628,  627,  626,  625,  624,  623,

      622,  621,  620,  619,  618,  617,  616,  615,  614,  613,
      612,  611,  610,  609,  608,  607,  606,  605,  604,  603,
      602,  601,  600,  599,  598,  597,  596,  595,  594,  593,
      592,  591,  590,  589,  588,  587,  586,  585,  584,  583,
      582,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  568,  567,  566,  565,  564,  563,
      562,  561,  560,  557,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  547,  546,  545,  544,  543,  542,  541,
      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  524,  523,  522,  521,  520,  519,

      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,
      508,  507,  506,  505,  504,  503,  502,  501,  500,  499,
      498,  497,  496,  495,  494,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  475,  474,  473,
      472,  471,  470,  469,  468,  467,  466,  465,  464,  463,
      460,  459,  455,  454,  451,  450,  449,  446,  445,  439,
      438,  437,  436,  435,  434,  433,  428,  427,  426,  425,
      424,  423,  422,  421,  420,  419,  418,  417,  416,  413,
      412,  408,  407,  404,  403,  402,  399,  398,  392,  219,
      219,  214,  214,  391,  390,  389,  388,  387,  386,  381,

      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  366,  365,  361,  360,  357,  356,  355,  352,
      351,  345,  153,  153,  148,  148,  344,  331,  328,  312,
      309,  281,  278,  264,  261,  245,  242,  220,  219,  215,
      214,  212,  198,  195,  179,  176,  154,  153,  149,  148,
      146,  737,    7,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737
    } ;

static yyconst flex_int16_t yy_chk[1113] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,   14,   19,   21,
       22,  748,   22,   22,   22,   23,   28,   28,   21,   19,
       23,   39,   24,   14,   24,   24,   24,   23,  733,   25,

       39,   25,   25,   25,   24,   29,   29,   30,   30,   38,
       24,   25,   36,   24,   44,   40,   36,   40,   42,   38,
       25,   41,   38,   47,   42,   42,   40,   48,   44,   41,
       24,   47,   46,   46,   41,   46,   49,   49,   47,   41,
       48,   51,   60,   65,   67,   68,  732,   68,   68,   68,
       69,   74,   74,   67,   65,   69,   85,   70,   60,   70,
       70,   70,   69,  731,   71,   85,   71,   71,   71,   70,
       75,   75,   76,   76,   51,   70,   71,   82,   70,   84,
       86,   82,   86,   95,   95,   71,   87,   90,  730,   84,
       94,   86,   84,  110,   87,   70,   78,   78,   78,   87,

      110,   90,   88,   94,   87,   78,   78,   78,   88,   88,
       97,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   92,   92,   93,   92,  104,  106,
      107,  104,  111,   97,   93,  113,  107,  104,  726,  107,
      722,   93,  115,  111,  113,  106,  114,  115,  114,  114,
      114,  120,  120,  116,  115,  116,  116,  116,  117,  718,
      117,  117,  117,  121,  121,  116,  122,  122,  128,  131,
      117,  116,  128,  130,  116,  136,  141,  141,  131,  117,
      167,  167,  133,  130,  140,  132,  130,  132,  717,  136,

      133,  116,  124,  124,  124,  133,  132,  140,  134,  713,
      133,  124,  124,  124,  134,  134,  143,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
      138,  138,  139,  138,  160,  160,  160,  174,  174,  143,
      139,  164,  164,  164,  160,  712,  165,  139,  165,  165,
      165,  164,  183,  160,  180,  180,  183,  166,  165,  166,
      164,  183,  166,  166,  166,  187,  202,  165,  187,  711,
      203,  233,  233,  202,  203,  226,  226,  226,  230,  230,
      230,  240,  240,  246,  246,  226,  268,  231,  230,  231,

      231,  231,  253,  268,  226,  253,  232,  230,  232,  231,
      269,  232,  232,  232,  269,  300,  300,  710,  231,  234,
      234,  234,  249,  335,  279,  706,  249,  279,  234,  234,
      335,  249,  705,  279,  234,  234,  234,  234,  234,  234,
      280,  284,  285,  280,  294,  294,  294,  284,  285,  280,
      284,  285,  307,  307,  294,  297,  297,  297,  298,  704,
      298,  298,  298,  294,  320,  297,  299,  320,  299,  703,
      298,  299,  299,  299,  297,  313,  313,  349,  349,  298,
      301,  301,  301,  316,  336,  361,  361,  316,  336,  301,
      301,  699,  316,  396,  396,  301,  301,  301,  301,  301,

      301,  346,  346,  346,  347,  347,  347,  348,  348,  348,
      698,  346,  393,  393,  393,  394,  394,  394,  408,  408,
      346,  693,  393,  395,  395,  395,  440,  440,  440,  443,
      443,  393,  397,  397,  397,  691,  440,  441,  441,  441,
      690,  397,  397,  455,  455,  440,  689,  397,  397,  397,
      397,  397,  397,  442,  442,  442,  444,  444,  444,  686,
      685,  684,  679,  677,  676,  444,  444,  675,  672,  671,
      670,  444,  444,  444,  444,  444,  444,  738,  665,  738,
      738,  738,  739,  663,  739,  739,  739,  740,  740,  741,
      662,  741,  741,  741,  742,  661,  742,  742,  742,  743,

      658,  743,  743,  743,  744,  744,  657,  744,  744,  745,
      745,  745,  745,  745,  746,  746,  746,  746,  746,  747,
      747,  747,  747,  747,  656,  654,  652,  650,  649,  648,
      647,  646,  645,  643,  642,  641,  640,  639,  638,  630,
      628,  626,  625,  624,  623,  622,  621,  619,  618,  617,
      616,  615,  614,  606,  604,  602,  601,  600,  599,  598,
      597,  595,  594,  593,  592,  591,  590,  582,  580,  578,
      576,  575,  574,  573,  571,  570,  569,  568,  567,  566,
      565,  562,  561,  560,  559,  558,  557,  556,  554,  553,
      552,  549,  547,  545,  543,  542,  541,  540,  538,  537,

      536,  535,  534,  533,  532,  529,  528,  527,  526,  525,
      524,  523,  521,  520,  519,  516,  514,  512,  510,  509,
      508,  507,  505,  504,  503,  502,  501,  500,  499,  496,
      495,  494,  493,  492,  491,  490,  488,  487,  486,  484,
      483,  482,  480,  478,  477,  476,  475,  474,  473,  472,
      471,  468,  467,  466,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  454,  453,  452,  451,  450,  449,  448,
      437,  436,  435,  433,  431,  430,  429,  428,  427,  426,
      425,  424,  421,  420,  419,  417,  416,  415,  414,  413,
      412,  411,  410,  409,  407,  406,  405,  404,  403,  402,

      401,  390,  389,  388,  386,  384,  383,  382,  381,  380,
      379,  378,  377,  374,  373,  372,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  360,  359,  358,  357,  356,
      355,  354,  341,  340,  339,  338,  337,  334,  333,  332,
      331,  330,  329,  328,  327,  326,  324,  323,  322,  321,
      319,  318,  315,  314,  312,  311,  310,  304,  302,  293,
      278,  274,  273,  272,  271,  270,  267,  266,  265,  264,
      263,  262,  261,  260,  259,  257,  256,  255,  254,  252,
      251,  248,  247,  245,  244,  243,  237,  235,  225,  219,
      218,  214,  213,  212,  208,  207,  206,  205,  204,  201,

      200,  199,  198,  197,  196,  195,  194,  193,  191,  190,
      189,  188,  186,  185,  182,  181,  179,  178,  177,  171,
      169,  159,  153,  152,  148,  147,  146,  137,  135,  129,
      127,  105,  103,   91,   89,   83,   81,   64,   61,   59,
       58,   57,   45,   43,   37,   35,   18,   15,   13,   12,
       11,    7,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,

      737,  737,  737,  737,  737,  737,  737,  737,  737,  737,
      737,  737
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#include "parser/lexinfo.h"
#include <iostream>

#define YY_INPUT(buf,result,max_size) \
    { \
        int c = grok::parser::LexerInfo::ReadChar();  \
        result = (c == -1) ? YY_NULL : (buf[0] = c, 1); \
    }

#define INITIAL 0
#define COMMENT1 1
#define COMMENT2 2

#define YY_NO_UNISTD_H 0
#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 738 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1053 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
;
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
BEGIN 0;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
;
	YY_BREAK
case 5:
YY_RULE_SETUP
BEGIN 0;
	YY_BREAK
case 6:
YY_RULE_SETUP
;
	YY_BREAK
case 7:
YY_RULE_SETUP
BEGIN COMMENT1;
	YY_BREAK
case 8:
YY_RULE_SETUP
BEGIN COMMENT2;
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return LPAREN; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return RPAREN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return LBRACK; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return RBRACK; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return LBRACE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
{ return RBRACE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
{ return COLON; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{ return SEMICOLON; }
	YY_BREAK
case 17:
YY_RULE_SETUP
{ return PERIOD; }
	YY_BREAK
case 18:
YY_RULE_SETUP
{ return ELLIPSIS; }
	YY_BREAK
case 19:
YY_RULE_SETUP
{ return CONDITIONAL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ return INC; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ return DEC; }
	YY_BREAK
case 22:
YY_RULE_SETUP
{ return ARROW; }
	YY_BREAK
case 23:
YY_RULE_SETUP
{ return ASSIGN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
{ return ASSIGN_BIT_OR; }
	YY_BREAK
case 25:
YY_RULE_SETUP
{ return ASSIGN_BIT_XOR; }
	YY_BREAK
case 26:
YY_RULE_SETUP
{ return ASSIGN_BIT_AND; }
	YY_BREAK
case 27:
YY_RULE_SETUP
{ return ASSIGN_SHL; }
	YY_BREAK
case 28:
YY_RULE_SETUP
{ return ASSIGN_SAR; }
	YY_BREAK
case 29:
YY_RULE_SETUP
{ return ASSIGN_SHR; }
	YY_BREAK
case 30:
YY_RULE_SETUP
{ return ASSIGN_ADD; }
	YY_BREAK
case 31:
YY_RULE_SETUP
{ return ASSIGN_SUB; }
	YY_BREAK
case 32:
YY_RULE_SETUP
{ return ASSIGN_MUL; }
	YY_BREAK
case 33:
YY_RULE_SETUP
{ return ASSIGN_DIV; }
	YY_BREAK
case 34:
YY_RULE_SETUP
{ return ASSIGN_MOD; }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ return COMMA; }
	YY_BREAK
case 36:
YY_RULE_SETUP
{ return OR; }
	YY_BREAK
case 37:
YY_RULE_SETUP
{ return AND; }
	YY_BREAK
case 38:
YY_RULE_SETUP
{ return BIT_OR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ return BIT_AND; }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ return BIT_XOR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
{ return SHL; }
	YY_BREAK
case 42:
YY_RULE_SETUP
{ return SAR; }
	YY_BREAK
case 43:
YY_RULE_SETUP
{ return SHR; }
	YY_BREAK
case 44:
YY_RULE_SETUP
{ return ADD; }
	YY_BREAK
case 45:
YY_RULE_SETUP
{ return SUB; }
	YY_BREAK
case 46:
YY_RULE_SETUP
{ return MUL; }
	YY_BREAK
case 47:
YY_RULE_SETUP
{ return DIV; }
	YY_BREAK
case 48:
YY_RULE_SETUP
{ return MOD; }
	YY_BREAK
case 49:
YY_RULE_SETUP
{ return EQ; }
	YY_BREAK
case 50:
YY_RULE_SETUP
{ return NE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
{ return EQ_STRICT; }
	YY_BREAK
case 52:
YY_RULE_SETUP
{ return NE_STRICT; }
	YY_BREAK
case 53:
YY_RULE_SETUP
{ return LT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
{ return GT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
{ return LTE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
{ return GTE; }
	YY_BREAK
case 57:
YY_RULE_SETUP
{ return INSTANCEOF; }
	YY_BREAK
case 58:
YY_RULE_SETUP
{ return IN; }
	YY_BREAK
case 59:
YY_RULE_SETUP
{ return BIT_NOT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
{ return DELETE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
{ return TYPEOF; }
	YY_BREAK
case 62:
YY_RULE_SETUP
{ return VOID; }
	YY_BREAK
case 63:
YY_RULE_SETUP
{ return BREAK; }
	YY_BREAK
case 64:
YY_RULE_SETUP
{ return CASE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
{ return CATCH; }
	YY_BREAK
case 66:
YY_RULE_SETUP
{ return CONTINUE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
{ return DEBUGGER; }
	YY_BREAK
case 68:
YY_RULE_SETUP
{ return DEFAULT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
{ return DO; }
	YY_BREAK
case 70:
YY_RULE_SETUP
{ return ELSE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
{ return FINALLY; }
	YY_BREAK
case 72:
YY_RULE_SETUP
{ return FOR; }
	YY_BREAK
case 73:
YY_RULE_SETUP
{ return FUNCTION; }
	YY_BREAK
case 74:
YY_RULE_SETUP
{ return IF; }
	YY_BREAK
case 75:
YY_RULE_SETUP
{ return NEW; }
	YY_BREAK
case 76:
YY_RULE_SETUP
{ return RETURN; }
	YY_BREAK
case 77:
YY_RULE_SETUP
{ return SWITCH; }
	YY_BREAK
case 78:
YY_RULE_SETUP
{ return THIS; }
	YY_BREAK
case 79:
YY_RULE_SETUP
{ return THROW; }
	YY_BREAK
case 80:
YY_RULE_SETUP
{ return TRY; }
	YY_BREAK
case 81:
YY_RULE_SETUP
{ return VAR; }
	YY_BREAK
case 82:
YY_RULE_SETUP
{ return WHILE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
{ return WITH; }
	YY_BREAK
case 84:
YY_RULE_SETUP
{ return NULL_LITERAL; }
	YY_BREAK
case 85:
YY_RULE_SETUP
{ return TRUE_LITERAL; }
	YY_BREAK
case 86:
YY_RULE_SETUP
{ return FALSE_LITERAL; }
	YY_BREAK
case 87:
YY_RULE_SETUP
{ return ASYNC; }
	YY_BREAK
case 88:
YY_RULE_SETUP
{ return AWAIT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
{ return CLASS; }
	YY_BREAK
case 90:
YY_RULE_SETUP
{ return CONST; }
	YY_BREAK
case 91:
YY_RULE_SETUP
{ return ENUM; }
	YY_BREAK
case 92:
YY_RULE_SETUP
{ return EXPORT; }
	YY_BREAK
case 93:
YY_RULE_SETUP
{ return EXTENDS; }
	YY_BREAK
case 94:
YY_RULE_SETUP
{ return IMPORT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
{ return LET; }
	YY_BREAK
case 96:
YY_RULE_SETUP
{ return STATIC; }
	YY_BREAK
case 97:
YY_RULE_SETUP
{ return SUPER; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT1):
case YY_STATE_EOF(COMMENT2):
{ return EOS; }
	YY_BREAK
case 98:
YY_RULE_SETUP
{ return NUMBER; }
	YY_BREAK
case 99:
YY_RULE_SETUP
{ return IDENTIFIER; }
	YY_BREAK
case 100:
YY_RULE_SETUP
{ return STRING; }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
{ yylineno++; }
	YY_BREAK
case 102:
YY_RULE_SETUP
{ return ILLEGAL; }
	YY_BREAK
case 103:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 738 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 738 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 737);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = true;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int yywrap() { return 1; }

namespace grok {
namespace parser {

TokenType LexerInfo::current_tok_;
String LexerInfo::current_matched_;
size_t LexerInfo::seek_;
Scanner *LexerInfo::scanner_;

TokenType LexerInfo::peek()
{
    return current_tok_;
}

void LexerInfo::advance()
{
    current_tok_ = (TokenType) ::yylex();
    current_matched_.assign(::yytext, ::yyleng);

    // TODO: seek_ should contain current position of yylex
    seek_ = 0;
}

bool LexerInfo::MatchNext(String str)
{
    LexerInfo::advance();
    bool ret = (current_matched_ == str);
    LexerInfo::advance();
    return ret;
}

size_t LexerInfo::GetSeek() { return seek_; }

char Scanner::ReadChar()
{
    return is_ ? is_.get() : EOF;
}

}
}

